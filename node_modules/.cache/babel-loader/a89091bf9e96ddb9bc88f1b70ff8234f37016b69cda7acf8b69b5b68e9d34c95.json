{"ast":null,"code":"// store.js\nimport { configureStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport './api.js';\n\n// Initial state\nconst initialState = {\n  currentWeather: null,\n  forecastWeather: null,\n  chartData: null\n};\n\n// Async thunk for fetching weather data\nexport const fetchWeatherData = createAsyncThunk('fetchWeatherData', async searchData => {\n  const [lat, lon] = searchData.value.split(\" \");\n  const city = searchData.label;\n  const currentWeatherResponse = await fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n  const forecastResponse = await fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n  const currentWeather = await currentWeatherResponse.json();\n  const forecast = await forecastResponse.json();\n  return {\n    city,\n    currentWeather,\n    forecast\n  };\n});\n\n// Create a slice for currentWeather\nconst currentWeatherSlice = createSlice({\n  name: 'currentWeather',\n  initialState: null,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      return action.payload.currentWeather;\n    });\n  }\n});\n\n// Create a slice for forecastWeather\nconst forecastWeatherSlice = createSlice({\n  name: 'forecastWeather',\n  initialState: null,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      return action.payload.forecast;\n    });\n  }\n});\n\n// Create a slice for chartData\nconst chartDataSlice = createSlice({\n  name: 'chartData',\n  initialState: null,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      return action.payload.forecast; // Assuming chartData is the same as forecast in your case\n    });\n  }\n});\n\n// Combine reducers\nconst rootReducer = {\n  currentWeather: currentWeatherSlice.reducer,\n  forecastWeather: forecastWeatherSlice.reducer,\n  chartData: chartDataSlice.reducer\n};\n\n// Configure store\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false // Disable serializable check for async thunk actions\n  })\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","createAsyncThunk","initialState","currentWeather","forecastWeather","chartData","fetchWeatherData","searchData","lat","lon","value","split","city","label","currentWeatherResponse","fetch","WEATHER_API_URL","WEATHER_API_KEY","forecastResponse","json","forecast","currentWeatherSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","forecastWeatherSlice","chartDataSlice","rootReducer","reducer","store","middleware","getDefaultMiddleware","serializableCheck"],"sources":["/Users/kiansilva/react-weather-app/src/store.js"],"sourcesContent":["// store.js\nimport { configureStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport './api.js';\n\n// Initial state\nconst initialState = {\n  currentWeather: null,\n  forecastWeather: null,\n  chartData: null,\n};\n\n// Async thunk for fetching weather data\nexport const fetchWeatherData = createAsyncThunk('fetchWeatherData', async (searchData) => {\n  const [lat, lon] = searchData.value.split(\" \");\n  const city = searchData.label;\n\n  const currentWeatherResponse = await fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n  const forecastResponse = await fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n\n  const currentWeather = await currentWeatherResponse.json();\n  const forecast = await forecastResponse.json();\n\n  return { city, currentWeather, forecast };\n});\n\n// Create a slice for currentWeather\nconst currentWeatherSlice = createSlice({\n  name: 'currentWeather',\n  initialState: null,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      return action.payload.currentWeather;\n    });\n  },\n});\n\n// Create a slice for forecastWeather\nconst forecastWeatherSlice = createSlice({\n  name: 'forecastWeather',\n  initialState: null,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      return action.payload.forecast;\n    });\n  },\n});\n\n// Create a slice for chartData\nconst chartDataSlice = createSlice({\n  name: 'chartData',\n  initialState: null,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      return action.payload.forecast; // Assuming chartData is the same as forecast in your case\n    });\n  },\n});\n\n// Combine reducers\nconst rootReducer = {\n  currentWeather: currentWeatherSlice.reducer,\n  forecastWeather: forecastWeatherSlice.reducer,\n  chartData: chartDataSlice.reducer,\n};\n\n// Configure store\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false, // Disable serializable check for async thunk actions\n    }),\n});\n\nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChF,OAAO,UAAU;;AAEjB;AACA,MAAMC,YAAY,GAAG;EACnBC,cAAc,EAAE,IAAI;EACpBC,eAAe,EAAE,IAAI;EACrBC,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGL,gBAAgB,CAAC,kBAAkB,EAAE,MAAOM,UAAU,IAAK;EACzF,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGF,UAAU,CAACG,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC;EAC9C,MAAMC,IAAI,GAAGL,UAAU,CAACM,KAAK;EAE7B,MAAMC,sBAAsB,GAAG,MAAMC,KAAK,CAAE,GAAEC,eAAgB,gBAAeR,GAAI,QAAOC,GAAI,UAASQ,eAAgB,eAAc,CAAC;EACpI,MAAMC,gBAAgB,GAAG,MAAMH,KAAK,CAAE,GAAEC,eAAgB,iBAAgBR,GAAI,QAAOC,GAAI,UAASQ,eAAgB,eAAc,CAAC;EAE/H,MAAMd,cAAc,GAAG,MAAMW,sBAAsB,CAACK,IAAI,CAAC,CAAC;EAC1D,MAAMC,QAAQ,GAAG,MAAMF,gBAAgB,CAACC,IAAI,CAAC,CAAC;EAE9C,OAAO;IAAEP,IAAI;IAAET,cAAc;IAAEiB;EAAS,CAAC;AAC3C,CAAC,CAAC;;AAEF;AACA,MAAMC,mBAAmB,GAAGrB,WAAW,CAAC;EACtCsB,IAAI,EAAE,gBAAgB;EACtBpB,YAAY,EAAE,IAAI;EAClBqB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACpB,gBAAgB,CAACqB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7D,OAAOA,MAAM,CAACC,OAAO,CAAC3B,cAAc;IACtC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA,MAAM4B,oBAAoB,GAAG/B,WAAW,CAAC;EACvCsB,IAAI,EAAE,iBAAiB;EACvBpB,YAAY,EAAE,IAAI;EAClBqB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACpB,gBAAgB,CAACqB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7D,OAAOA,MAAM,CAACC,OAAO,CAACV,QAAQ;IAChC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA,MAAMY,cAAc,GAAGhC,WAAW,CAAC;EACjCsB,IAAI,EAAE,WAAW;EACjBpB,YAAY,EAAE,IAAI;EAClBqB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACpB,gBAAgB,CAACqB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7D,OAAOA,MAAM,CAACC,OAAO,CAACV,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA,MAAMa,WAAW,GAAG;EAClB9B,cAAc,EAAEkB,mBAAmB,CAACa,OAAO;EAC3C9B,eAAe,EAAE2B,oBAAoB,CAACG,OAAO;EAC7C7B,SAAS,EAAE2B,cAAc,CAACE;AAC5B,CAAC;;AAED;AACA,MAAMC,KAAK,GAAGpC,cAAc,CAAC;EAC3BmC,OAAO,EAAED,WAAW;EACpBG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE,KAAK,CAAE;EAC5B,CAAC;AACL,CAAC,CAAC;AAEF,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}