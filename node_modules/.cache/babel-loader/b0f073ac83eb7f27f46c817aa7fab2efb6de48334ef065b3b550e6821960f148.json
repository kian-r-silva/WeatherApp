{"ast":null,"code":"// store.js\nimport { configureStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { WEATHER_API_KEY, WEATHER_API_URL } from './api.js';\n\n// Async thunk for fetching weather data\nexport const fetchWeatherData = createAsyncThunk('fetchWeatherData', async searchData => {\n  const [lat, lon] = searchData.value.split(' ');\n  const city = searchData.label;\n  const currentWeatherResponse = await fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n  const forecastResponse = await fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n  const currentWeather = await currentWeatherResponse.json();\n  const forecast = await forecastResponse.json();\n  return {\n    city,\n    currentWeather,\n    forecast\n  };\n});\n\n// Create a slice for currentWeather\nconst currentWeatherSlice = createSlice({\n  name: 'currentWeather',\n  initialState: {\n    data: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      state.data = action.payload.currentWeather;\n    });\n  }\n});\n\n// Create a slice for forecastWeather\nconst forecastWeatherSlice = createSlice({\n  name: 'forecastWeather',\n  initialState: {\n    data: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      state.data = action.payload.forecast.list;\n    });\n  }\n});\n\n// Create a slice for chartData\nconst chartDataSlice = createSlice({\n  name: 'chartData',\n  initialState: {\n    data: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      state.data = action.payload.forecast.list;\n    });\n  }\n});\n\n// Combine reducers\nconst rootReducer = {\n  currentWeather: currentWeatherSlice.reducer,\n  forecastWeather: forecastWeatherSlice.reducer,\n  chartData: chartDataSlice.reducer\n};\n\n// Configure store\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","createAsyncThunk","WEATHER_API_KEY","WEATHER_API_URL","fetchWeatherData","searchData","lat","lon","value","split","city","label","currentWeatherResponse","fetch","forecastResponse","currentWeather","json","forecast","currentWeatherSlice","name","initialState","data","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","forecastWeatherSlice","list","chartDataSlice","rootReducer","reducer","forecastWeather","chartData","store","middleware","getDefaultMiddleware","serializableCheck"],"sources":["/Users/kiansilva/react-weather-app/WeatherApp/src/store.js"],"sourcesContent":["// store.js\nimport { configureStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { WEATHER_API_KEY, WEATHER_API_URL } from './api.js';\n\n// Async thunk for fetching weather data\nexport const fetchWeatherData = createAsyncThunk('fetchWeatherData', async (searchData) => {\n  const [lat, lon] = searchData.value.split(' ');\n  const city = searchData.label;\n\n  const currentWeatherResponse = await fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n  const forecastResponse = await fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n\n  const currentWeather = await currentWeatherResponse.json();\n  const forecast = await forecastResponse.json();\n\n  return { city, currentWeather, forecast };\n});\n\n// Create a slice for currentWeather\nconst currentWeatherSlice = createSlice({\n  name: 'currentWeather',\n  initialState: { data: null },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      state.data = action.payload.currentWeather;\n    });\n  },\n});\n\n// Create a slice for forecastWeather\nconst forecastWeatherSlice = createSlice({\n  name: 'forecastWeather',\n  initialState: { data: null },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      state.data = action.payload.forecast.list;\n    });\n  },\n});\n\n// Create a slice for chartData\nconst chartDataSlice = createSlice({\n  name: 'chartData',\n  initialState: { data: null },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchWeatherData.fulfilled, (state, action) => {\n      state.data = action.payload.forecast.list; \n    });\n  },\n});\n\n// Combine reducers\nconst rootReducer = {\n  currentWeather: currentWeatherSlice.reducer,\n  forecastWeather: forecastWeatherSlice.reducer,\n  chartData: chartDataSlice.reducer,\n};\n\n// Configure store\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\nexport default store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}